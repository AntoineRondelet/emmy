// Code generated by protoc-gen-go.
// source: msgs.proto
// DO NOT EDIT!

/*
Package comm is a generated protocol buffer package.

It is generated from these files:
	msgs.proto

It has these top-level messages:
	PedersenFirst
	EmptyMsg
	PedersenDecommitment
	BigInt
	ECGroupElement
	Status
	SchnorrProofRandomData
	SchnorrECProofRandomData
	SchnorrProofData
	CSPaillierSecretKey
	CSPaillierPubKey
	CSPaillierOpening
	CSPaillierProofRandomData
	CSPaillierProofData
*/
package comm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// P, OrderOfSubgroup, G could be actually fixed, or least not changed each time
type PedersenFirst struct {
	H []byte `protobuf:"bytes,1,opt,name=H,proto3" json:"H,omitempty"`
}

func (m *PedersenFirst) Reset()                    { *m = PedersenFirst{} }
func (m *PedersenFirst) String() string            { return proto.CompactTextString(m) }
func (*PedersenFirst) ProtoMessage()               {}
func (*PedersenFirst) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()                    { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string            { return proto.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()               {}
func (*EmptyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PedersenDecommitment struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	R []byte `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
}

func (m *PedersenDecommitment) Reset()                    { *m = PedersenDecommitment{} }
func (m *PedersenDecommitment) String() string            { return proto.CompactTextString(m) }
func (*PedersenDecommitment) ProtoMessage()               {}
func (*PedersenDecommitment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type BigInt struct {
	X1 []byte `protobuf:"bytes,1,opt,name=X1,proto3" json:"X1,omitempty"`
}

func (m *BigInt) Reset()                    { *m = BigInt{} }
func (m *BigInt) String() string            { return proto.CompactTextString(m) }
func (*BigInt) ProtoMessage()               {}
func (*BigInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ECGroupElement struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *ECGroupElement) Reset()                    { *m = ECGroupElement{} }
func (m *ECGroupElement) String() string            { return proto.CompactTextString(m) }
func (*ECGroupElement) ProtoMessage()               {}
func (*ECGroupElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Status struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SchnorrProofRandomData struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	A []byte `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	B []byte `protobuf:"bytes,3,opt,name=B,proto3" json:"B,omitempty"`
}

func (m *SchnorrProofRandomData) Reset()                    { *m = SchnorrProofRandomData{} }
func (m *SchnorrProofRandomData) String() string            { return proto.CompactTextString(m) }
func (*SchnorrProofRandomData) ProtoMessage()               {}
func (*SchnorrProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type SchnorrECProofRandomData struct {
	X *ECGroupElement `protobuf:"bytes,1,opt,name=X" json:"X,omitempty"`
	A *ECGroupElement `protobuf:"bytes,2,opt,name=A" json:"A,omitempty"`
	B *ECGroupElement `protobuf:"bytes,3,opt,name=B" json:"B,omitempty"`
}

func (m *SchnorrECProofRandomData) Reset()                    { *m = SchnorrECProofRandomData{} }
func (m *SchnorrECProofRandomData) String() string            { return proto.CompactTextString(m) }
func (*SchnorrECProofRandomData) ProtoMessage()               {}
func (*SchnorrECProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SchnorrECProofRandomData) GetX() *ECGroupElement {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *SchnorrECProofRandomData) GetA() *ECGroupElement {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *SchnorrECProofRandomData) GetB() *ECGroupElement {
	if m != nil {
		return m.B
	}
	return nil
}

type SchnorrProofData struct {
	Z        []byte `protobuf:"bytes,1,opt,name=Z,proto3" json:"Z,omitempty"`
	Trapdoor []byte `protobuf:"bytes,2,opt,name=Trapdoor,proto3" json:"Trapdoor,omitempty"`
}

func (m *SchnorrProofData) Reset()                    { *m = SchnorrProofData{} }
func (m *SchnorrProofData) String() string            { return proto.CompactTextString(m) }
func (*SchnorrProofData) ProtoMessage()               {}
func (*SchnorrProofData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type CSPaillierSecretKey struct {
	N                    []byte `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	G                    []byte `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`
	X1                   []byte `protobuf:"bytes,3,opt,name=X1,proto3" json:"X1,omitempty"`
	X2                   []byte `protobuf:"bytes,4,opt,name=X2,proto3" json:"X2,omitempty"`
	X3                   []byte `protobuf:"bytes,5,opt,name=X3,proto3" json:"X3,omitempty"`
	DLogP                []byte `protobuf:"bytes,6,opt,name=DLogP,proto3" json:"DLogP,omitempty"`
	DLogG                []byte `protobuf:"bytes,7,opt,name=DLogG,proto3" json:"DLogG,omitempty"`
	DLogQ                []byte `protobuf:"bytes,8,opt,name=DLogQ,proto3" json:"DLogQ,omitempty"`
	VerifiableEncGroupN  []byte `protobuf:"bytes,9,opt,name=VerifiableEncGroupN,proto3" json:"VerifiableEncGroupN,omitempty"`
	VerifiableEncGroupG1 []byte `protobuf:"bytes,10,opt,name=VerifiableEncGroupG1,proto3" json:"VerifiableEncGroupG1,omitempty"`
	VerifiableEncGroupH1 []byte `protobuf:"bytes,11,opt,name=VerifiableEncGroupH1,proto3" json:"VerifiableEncGroupH1,omitempty"`
	K                    int32  `protobuf:"varint,12,opt,name=K" json:"K,omitempty"`
	K1                   int32  `protobuf:"varint,13,opt,name=K1" json:"K1,omitempty"`
}

func (m *CSPaillierSecretKey) Reset()                    { *m = CSPaillierSecretKey{} }
func (m *CSPaillierSecretKey) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierSecretKey) ProtoMessage()               {}
func (*CSPaillierSecretKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type CSPaillierPubKey struct {
	N                    []byte `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	G                    []byte `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`
	Y1                   []byte `protobuf:"bytes,3,opt,name=Y1,proto3" json:"Y1,omitempty"`
	Y2                   []byte `protobuf:"bytes,4,opt,name=Y2,proto3" json:"Y2,omitempty"`
	Y3                   []byte `protobuf:"bytes,5,opt,name=Y3,proto3" json:"Y3,omitempty"`
	DLogP                []byte `protobuf:"bytes,6,opt,name=DLogP,proto3" json:"DLogP,omitempty"`
	DLogG                []byte `protobuf:"bytes,7,opt,name=DLogG,proto3" json:"DLogG,omitempty"`
	DLogQ                []byte `protobuf:"bytes,8,opt,name=DLogQ,proto3" json:"DLogQ,omitempty"`
	VerifiableEncGroupN  []byte `protobuf:"bytes,9,opt,name=VerifiableEncGroupN,proto3" json:"VerifiableEncGroupN,omitempty"`
	VerifiableEncGroupG1 []byte `protobuf:"bytes,10,opt,name=VerifiableEncGroupG1,proto3" json:"VerifiableEncGroupG1,omitempty"`
	VerifiableEncGroupH1 []byte `protobuf:"bytes,11,opt,name=VerifiableEncGroupH1,proto3" json:"VerifiableEncGroupH1,omitempty"`
	K                    int32  `protobuf:"varint,12,opt,name=K" json:"K,omitempty"`
	K1                   int32  `protobuf:"varint,13,opt,name=K1" json:"K1,omitempty"`
}

func (m *CSPaillierPubKey) Reset()                    { *m = CSPaillierPubKey{} }
func (m *CSPaillierPubKey) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierPubKey) ProtoMessage()               {}
func (*CSPaillierPubKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type CSPaillierOpening struct {
	U     []byte `protobuf:"bytes,1,opt,name=U,proto3" json:"U,omitempty"`
	E     []byte `protobuf:"bytes,2,opt,name=E,proto3" json:"E,omitempty"`
	V     []byte `protobuf:"bytes,3,opt,name=V,proto3" json:"V,omitempty"`
	Delta []byte `protobuf:"bytes,4,opt,name=Delta,proto3" json:"Delta,omitempty"`
	Label []byte `protobuf:"bytes,5,opt,name=Label,proto3" json:"Label,omitempty"`
	L     []byte `protobuf:"bytes,6,opt,name=L,proto3" json:"L,omitempty"`
}

func (m *CSPaillierOpening) Reset()                    { *m = CSPaillierOpening{} }
func (m *CSPaillierOpening) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierOpening) ProtoMessage()               {}
func (*CSPaillierOpening) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type CSPaillierProofRandomData struct {
	U1     []byte `protobuf:"bytes,1,opt,name=U1,proto3" json:"U1,omitempty"`
	E1     []byte `protobuf:"bytes,2,opt,name=E1,proto3" json:"E1,omitempty"`
	V1     []byte `protobuf:"bytes,3,opt,name=V1,proto3" json:"V1,omitempty"`
	Delta1 []byte `protobuf:"bytes,4,opt,name=Delta1,proto3" json:"Delta1,omitempty"`
	L1     []byte `protobuf:"bytes,5,opt,name=L1,proto3" json:"L1,omitempty"`
}

func (m *CSPaillierProofRandomData) Reset()                    { *m = CSPaillierProofRandomData{} }
func (m *CSPaillierProofRandomData) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierProofRandomData) ProtoMessage()               {}
func (*CSPaillierProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type CSPaillierProofData struct {
	RTilde      []byte `protobuf:"bytes,1,opt,name=RTilde,proto3" json:"RTilde,omitempty"`
	RTildeIsNeg bool   `protobuf:"varint,2,opt,name=RTildeIsNeg" json:"RTildeIsNeg,omitempty"`
	STilde      []byte `protobuf:"bytes,3,opt,name=STilde,proto3" json:"STilde,omitempty"`
	STildeIsNeg bool   `protobuf:"varint,4,opt,name=STildeIsNeg" json:"STildeIsNeg,omitempty"`
	MTilde      []byte `protobuf:"bytes,5,opt,name=MTilde,proto3" json:"MTilde,omitempty"`
	MTildeIsNeg bool   `protobuf:"varint,6,opt,name=MTildeIsNeg" json:"MTildeIsNeg,omitempty"`
}

func (m *CSPaillierProofData) Reset()                    { *m = CSPaillierProofData{} }
func (m *CSPaillierProofData) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierProofData) ProtoMessage()               {}
func (*CSPaillierProofData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func init() {
	proto.RegisterType((*PedersenFirst)(nil), "comm.PedersenFirst")
	proto.RegisterType((*EmptyMsg)(nil), "comm.EmptyMsg")
	proto.RegisterType((*PedersenDecommitment)(nil), "comm.PedersenDecommitment")
	proto.RegisterType((*BigInt)(nil), "comm.BigInt")
	proto.RegisterType((*ECGroupElement)(nil), "comm.ECGroupElement")
	proto.RegisterType((*Status)(nil), "comm.Status")
	proto.RegisterType((*SchnorrProofRandomData)(nil), "comm.SchnorrProofRandomData")
	proto.RegisterType((*SchnorrECProofRandomData)(nil), "comm.SchnorrECProofRandomData")
	proto.RegisterType((*SchnorrProofData)(nil), "comm.SchnorrProofData")
	proto.RegisterType((*CSPaillierSecretKey)(nil), "comm.CSPaillierSecretKey")
	proto.RegisterType((*CSPaillierPubKey)(nil), "comm.CSPaillierPubKey")
	proto.RegisterType((*CSPaillierOpening)(nil), "comm.CSPaillierOpening")
	proto.RegisterType((*CSPaillierProofRandomData)(nil), "comm.CSPaillierProofRandomData")
	proto.RegisterType((*CSPaillierProofData)(nil), "comm.CSPaillierProofData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Pedersen service

type PedersenClient interface {
	GetH(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*PedersenFirst, error)
	Commit(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*EmptyMsg, error)
	Decommit(ctx context.Context, in *PedersenDecommitment, opts ...grpc.CallOption) (*Status, error)
}

type pedersenClient struct {
	cc *grpc.ClientConn
}

func NewPedersenClient(cc *grpc.ClientConn) PedersenClient {
	return &pedersenClient{cc}
}

func (c *pedersenClient) GetH(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*PedersenFirst, error) {
	out := new(PedersenFirst)
	err := grpc.Invoke(ctx, "/comm.Pedersen/GetH", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pedersenClient) Commit(ctx context.Context, in *BigInt, opts ...grpc.CallOption) (*EmptyMsg, error) {
	out := new(EmptyMsg)
	err := grpc.Invoke(ctx, "/comm.Pedersen/Commit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pedersenClient) Decommit(ctx context.Context, in *PedersenDecommitment, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/comm.Pedersen/Decommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pedersen service

type PedersenServer interface {
	GetH(context.Context, *EmptyMsg) (*PedersenFirst, error)
	Commit(context.Context, *BigInt) (*EmptyMsg, error)
	Decommit(context.Context, *PedersenDecommitment) (*Status, error)
}

func RegisterPedersenServer(s *grpc.Server, srv PedersenServer) {
	s.RegisterService(&_Pedersen_serviceDesc, srv)
}

func _Pedersen_GetH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedersenServer).GetH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Pedersen/GetH",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedersenServer).GetH(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pedersen_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BigInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedersenServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Pedersen/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedersenServer).Commit(ctx, req.(*BigInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pedersen_Decommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PedersenDecommitment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedersenServer).Decommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Pedersen/Decommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedersenServer).Decommit(ctx, req.(*PedersenDecommitment))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pedersen_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comm.Pedersen",
	HandlerType: (*PedersenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetH",
			Handler:    _Pedersen_GetH_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Pedersen_Commit_Handler,
		},
		{
			MethodName: "Decommit",
			Handler:    _Pedersen_Decommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msgs.proto",
}

// Client API for PedersenEC service

type PedersenECClient interface {
	GetH(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*ECGroupElement, error)
	Commit(ctx context.Context, in *ECGroupElement, opts ...grpc.CallOption) (*EmptyMsg, error)
	Decommit(ctx context.Context, in *PedersenDecommitment, opts ...grpc.CallOption) (*Status, error)
}

type pedersenECClient struct {
	cc *grpc.ClientConn
}

func NewPedersenECClient(cc *grpc.ClientConn) PedersenECClient {
	return &pedersenECClient{cc}
}

func (c *pedersenECClient) GetH(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*ECGroupElement, error) {
	out := new(ECGroupElement)
	err := grpc.Invoke(ctx, "/comm.PedersenEC/GetH", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pedersenECClient) Commit(ctx context.Context, in *ECGroupElement, opts ...grpc.CallOption) (*EmptyMsg, error) {
	out := new(EmptyMsg)
	err := grpc.Invoke(ctx, "/comm.PedersenEC/Commit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pedersenECClient) Decommit(ctx context.Context, in *PedersenDecommitment, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/comm.PedersenEC/Decommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PedersenEC service

type PedersenECServer interface {
	GetH(context.Context, *EmptyMsg) (*ECGroupElement, error)
	Commit(context.Context, *ECGroupElement) (*EmptyMsg, error)
	Decommit(context.Context, *PedersenDecommitment) (*Status, error)
}

func RegisterPedersenECServer(s *grpc.Server, srv PedersenECServer) {
	s.RegisterService(&_PedersenEC_serviceDesc, srv)
}

func _PedersenEC_GetH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedersenECServer).GetH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.PedersenEC/GetH",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedersenECServer).GetH(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PedersenEC_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECGroupElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedersenECServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.PedersenEC/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedersenECServer).Commit(ctx, req.(*ECGroupElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _PedersenEC_Decommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PedersenDecommitment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedersenECServer).Decommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.PedersenEC/Decommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedersenECServer).Decommit(ctx, req.(*PedersenDecommitment))
	}
	return interceptor(ctx, in, info, handler)
}

var _PedersenEC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comm.PedersenEC",
	HandlerType: (*PedersenECServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetH",
			Handler:    _PedersenEC_GetH_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _PedersenEC_Commit_Handler,
		},
		{
			MethodName: "Decommit",
			Handler:    _PedersenEC_Decommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msgs.proto",
}

// Client API for SchnorrProtocol service

type SchnorrProtocolClient interface {
	// OpeningMsg is called in ZKP and ZKPOK, input is Pedersen's h = g^a, output is challenge commitment
	OpeningMsg(ctx context.Context, in *PedersenFirst, opts ...grpc.CallOption) (*BigInt, error)
	// PedersenDecommitment is used even it is not ZKP or ZKPOK (trapdoor is empty for SigmaProtocol)
	ProofRandomData(ctx context.Context, in *SchnorrProofRandomData, opts ...grpc.CallOption) (*PedersenDecommitment, error)
	ProofData(ctx context.Context, in *SchnorrProofData, opts ...grpc.CallOption) (*Status, error)
}

type schnorrProtocolClient struct {
	cc *grpc.ClientConn
}

func NewSchnorrProtocolClient(cc *grpc.ClientConn) SchnorrProtocolClient {
	return &schnorrProtocolClient{cc}
}

func (c *schnorrProtocolClient) OpeningMsg(ctx context.Context, in *PedersenFirst, opts ...grpc.CallOption) (*BigInt, error) {
	out := new(BigInt)
	err := grpc.Invoke(ctx, "/comm.SchnorrProtocol/OpeningMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schnorrProtocolClient) ProofRandomData(ctx context.Context, in *SchnorrProofRandomData, opts ...grpc.CallOption) (*PedersenDecommitment, error) {
	out := new(PedersenDecommitment)
	err := grpc.Invoke(ctx, "/comm.SchnorrProtocol/ProofRandomData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schnorrProtocolClient) ProofData(ctx context.Context, in *SchnorrProofData, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/comm.SchnorrProtocol/ProofData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SchnorrProtocol service

type SchnorrProtocolServer interface {
	// OpeningMsg is called in ZKP and ZKPOK, input is Pedersen's h = g^a, output is challenge commitment
	OpeningMsg(context.Context, *PedersenFirst) (*BigInt, error)
	// PedersenDecommitment is used even it is not ZKP or ZKPOK (trapdoor is empty for SigmaProtocol)
	ProofRandomData(context.Context, *SchnorrProofRandomData) (*PedersenDecommitment, error)
	ProofData(context.Context, *SchnorrProofData) (*Status, error)
}

func RegisterSchnorrProtocolServer(s *grpc.Server, srv SchnorrProtocolServer) {
	s.RegisterService(&_SchnorrProtocol_serviceDesc, srv)
}

func _SchnorrProtocol_OpeningMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PedersenFirst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchnorrProtocolServer).OpeningMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.SchnorrProtocol/OpeningMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchnorrProtocolServer).OpeningMsg(ctx, req.(*PedersenFirst))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchnorrProtocol_ProofRandomData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchnorrProofRandomData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchnorrProtocolServer).ProofRandomData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.SchnorrProtocol/ProofRandomData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchnorrProtocolServer).ProofRandomData(ctx, req.(*SchnorrProofRandomData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchnorrProtocol_ProofData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchnorrProofData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchnorrProtocolServer).ProofData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.SchnorrProtocol/ProofData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchnorrProtocolServer).ProofData(ctx, req.(*SchnorrProofData))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchnorrProtocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comm.SchnorrProtocol",
	HandlerType: (*SchnorrProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpeningMsg",
			Handler:    _SchnorrProtocol_OpeningMsg_Handler,
		},
		{
			MethodName: "ProofRandomData",
			Handler:    _SchnorrProtocol_ProofRandomData_Handler,
		},
		{
			MethodName: "ProofData",
			Handler:    _SchnorrProtocol_ProofData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msgs.proto",
}

// Client API for SchnorrECProtocol service

type SchnorrECProtocolClient interface {
	// OpeningMsg is called in ZKP and ZKPOK, input is Pedersen's h = g^a, output is challenge commitment
	OpeningMsg(ctx context.Context, in *ECGroupElement, opts ...grpc.CallOption) (*ECGroupElement, error)
	// PedersenDecommitment is used even it is not ZKP or ZKPOK (trapdoor is empty for SigmaProtocol)
	ProofRandomData(ctx context.Context, in *SchnorrECProofRandomData, opts ...grpc.CallOption) (*PedersenDecommitment, error)
	ProofData(ctx context.Context, in *SchnorrProofData, opts ...grpc.CallOption) (*Status, error)
}

type schnorrECProtocolClient struct {
	cc *grpc.ClientConn
}

func NewSchnorrECProtocolClient(cc *grpc.ClientConn) SchnorrECProtocolClient {
	return &schnorrECProtocolClient{cc}
}

func (c *schnorrECProtocolClient) OpeningMsg(ctx context.Context, in *ECGroupElement, opts ...grpc.CallOption) (*ECGroupElement, error) {
	out := new(ECGroupElement)
	err := grpc.Invoke(ctx, "/comm.SchnorrECProtocol/OpeningMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schnorrECProtocolClient) ProofRandomData(ctx context.Context, in *SchnorrECProofRandomData, opts ...grpc.CallOption) (*PedersenDecommitment, error) {
	out := new(PedersenDecommitment)
	err := grpc.Invoke(ctx, "/comm.SchnorrECProtocol/ProofRandomData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schnorrECProtocolClient) ProofData(ctx context.Context, in *SchnorrProofData, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/comm.SchnorrECProtocol/ProofData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SchnorrECProtocol service

type SchnorrECProtocolServer interface {
	// OpeningMsg is called in ZKP and ZKPOK, input is Pedersen's h = g^a, output is challenge commitment
	OpeningMsg(context.Context, *ECGroupElement) (*ECGroupElement, error)
	// PedersenDecommitment is used even it is not ZKP or ZKPOK (trapdoor is empty for SigmaProtocol)
	ProofRandomData(context.Context, *SchnorrECProofRandomData) (*PedersenDecommitment, error)
	ProofData(context.Context, *SchnorrProofData) (*Status, error)
}

func RegisterSchnorrECProtocolServer(s *grpc.Server, srv SchnorrECProtocolServer) {
	s.RegisterService(&_SchnorrECProtocol_serviceDesc, srv)
}

func _SchnorrECProtocol_OpeningMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECGroupElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchnorrECProtocolServer).OpeningMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.SchnorrECProtocol/OpeningMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchnorrECProtocolServer).OpeningMsg(ctx, req.(*ECGroupElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchnorrECProtocol_ProofRandomData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchnorrECProofRandomData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchnorrECProtocolServer).ProofRandomData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.SchnorrECProtocol/ProofRandomData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchnorrECProtocolServer).ProofRandomData(ctx, req.(*SchnorrECProofRandomData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchnorrECProtocol_ProofData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchnorrProofData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchnorrECProtocolServer).ProofData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.SchnorrECProtocol/ProofData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchnorrECProtocolServer).ProofData(ctx, req.(*SchnorrProofData))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchnorrECProtocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comm.SchnorrECProtocol",
	HandlerType: (*SchnorrECProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpeningMsg",
			Handler:    _SchnorrECProtocol_OpeningMsg_Handler,
		},
		{
			MethodName: "ProofRandomData",
			Handler:    _SchnorrECProtocol_ProofRandomData_Handler,
		},
		{
			MethodName: "ProofData",
			Handler:    _SchnorrECProtocol_ProofData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msgs.proto",
}

// Client API for CSPaillierProtocol service

type CSPaillierProtocolClient interface {
	OpeningMsg(ctx context.Context, in *CSPaillierOpening, opts ...grpc.CallOption) (*EmptyMsg, error)
	ProofRandomData(ctx context.Context, in *CSPaillierProofRandomData, opts ...grpc.CallOption) (*BigInt, error)
	ProofData(ctx context.Context, in *CSPaillierProofData, opts ...grpc.CallOption) (*Status, error)
}

type cSPaillierProtocolClient struct {
	cc *grpc.ClientConn
}

func NewCSPaillierProtocolClient(cc *grpc.ClientConn) CSPaillierProtocolClient {
	return &cSPaillierProtocolClient{cc}
}

func (c *cSPaillierProtocolClient) OpeningMsg(ctx context.Context, in *CSPaillierOpening, opts ...grpc.CallOption) (*EmptyMsg, error) {
	out := new(EmptyMsg)
	err := grpc.Invoke(ctx, "/comm.CSPaillierProtocol/OpeningMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSPaillierProtocolClient) ProofRandomData(ctx context.Context, in *CSPaillierProofRandomData, opts ...grpc.CallOption) (*BigInt, error) {
	out := new(BigInt)
	err := grpc.Invoke(ctx, "/comm.CSPaillierProtocol/ProofRandomData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSPaillierProtocolClient) ProofData(ctx context.Context, in *CSPaillierProofData, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/comm.CSPaillierProtocol/ProofData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CSPaillierProtocol service

type CSPaillierProtocolServer interface {
	OpeningMsg(context.Context, *CSPaillierOpening) (*EmptyMsg, error)
	ProofRandomData(context.Context, *CSPaillierProofRandomData) (*BigInt, error)
	ProofData(context.Context, *CSPaillierProofData) (*Status, error)
}

func RegisterCSPaillierProtocolServer(s *grpc.Server, srv CSPaillierProtocolServer) {
	s.RegisterService(&_CSPaillierProtocol_serviceDesc, srv)
}

func _CSPaillierProtocol_OpeningMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSPaillierOpening)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSPaillierProtocolServer).OpeningMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.CSPaillierProtocol/OpeningMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSPaillierProtocolServer).OpeningMsg(ctx, req.(*CSPaillierOpening))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSPaillierProtocol_ProofRandomData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSPaillierProofRandomData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSPaillierProtocolServer).ProofRandomData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.CSPaillierProtocol/ProofRandomData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSPaillierProtocolServer).ProofRandomData(ctx, req.(*CSPaillierProofRandomData))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSPaillierProtocol_ProofData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSPaillierProofData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSPaillierProtocolServer).ProofData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.CSPaillierProtocol/ProofData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSPaillierProtocolServer).ProofData(ctx, req.(*CSPaillierProofData))
	}
	return interceptor(ctx, in, info, handler)
}

var _CSPaillierProtocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comm.CSPaillierProtocol",
	HandlerType: (*CSPaillierProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpeningMsg",
			Handler:    _CSPaillierProtocol_OpeningMsg_Handler,
		},
		{
			MethodName: "ProofRandomData",
			Handler:    _CSPaillierProtocol_ProofRandomData_Handler,
		},
		{
			MethodName: "ProofData",
			Handler:    _CSPaillierProtocol_ProofData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msgs.proto",
}

func init() { proto.RegisterFile("msgs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 837 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe4, 0x56, 0xcd, 0x6e, 0xe2, 0x56,
	0x14, 0x1e, 0x33, 0x84, 0x61, 0x4e, 0x98, 0xcc, 0xcc, 0x4d, 0x94, 0xde, 0xa0, 0xfe, 0x44, 0x77,
	0x95, 0x45, 0x8b, 0x62, 0x90, 0x52, 0xa9, 0xea, 0x26, 0x10, 0x17, 0x22, 0x7e, 0x42, 0xec, 0x80,
	0xe2, 0xec, 0x0c, 0xdc, 0x50, 0x4b, 0x06, 0x23, 0xdb, 0xa8, 0xca, 0x0b, 0xf4, 0x25, 0xba, 0xef,
	0x8b, 0x74, 0xd3, 0x3e, 0x40, 0xa5, 0x4a, 0x7d, 0x99, 0xfa, 0xfe, 0x81, 0x6d, 0x4c, 0xd5, 0x45,
	0xbb, 0xea, 0xce, 0xdf, 0xe1, 0x7c, 0xe7, 0x9e, 0xef, 0xbb, 0x3f, 0x07, 0x80, 0x45, 0x38, 0x0f,
	0x6b, 0xab, 0xc0, 0x8f, 0x7c, 0x54, 0x9c, 0xfa, 0x8b, 0x05, 0xf9, 0x0c, 0xde, 0x0d, 0xe9, 0x8c,
	0x06, 0x21, 0x5d, 0x7e, 0xe7, 0x06, 0x61, 0x84, 0x2a, 0xa0, 0x75, 0xb0, 0x76, 0xae, 0x5d, 0x54,
	0x4c, 0xad, 0x43, 0x00, 0xca, 0xc6, 0x62, 0x15, 0xbd, 0xf4, 0xc3, 0x39, 0xa9, 0xc3, 0x89, 0x4a,
	0xbd, 0xa1, 0x8c, 0xec, 0x46, 0x0b, 0xba, 0xe4, 0x8c, 0x47, 0xc5, 0x78, 0x64, 0xc8, 0xc4, 0x05,
	0x81, 0x4c, 0x82, 0xa1, 0xd4, 0x74, 0xe7, 0xb7, 0x71, 0xd6, 0x11, 0x14, 0x1e, 0x75, 0x99, 0x16,
	0x7f, 0x91, 0x2f, 0xe1, 0xc8, 0x68, 0xb5, 0x03, 0x7f, 0xbd, 0x32, 0x3c, 0x9a, 0x5f, 0xc7, 0x56,
	0x75, 0x6c, 0x42, 0xa0, 0x64, 0x45, 0x4e, 0xb4, 0x0e, 0x11, 0x86, 0x37, 0xd6, 0x7a, 0x3a, 0xa5,
	0x61, 0xc8, 0x73, 0xcb, 0xa6, 0x82, 0xa4, 0x09, 0xa7, 0xd6, 0xf4, 0xfb, 0xa5, 0x1f, 0x04, 0xc3,
	0xc0, 0xf7, 0x9f, 0x4d, 0x67, 0x39, 0xf3, 0x17, 0x37, 0x4e, 0xe4, 0xec, 0x56, 0xbe, 0x56, 0x95,
	0xaf, 0x19, 0x6a, 0xe2, 0xd7, 0x02, 0x35, 0xc9, 0x8f, 0x1a, 0x60, 0x59, 0xc4, 0x68, 0x65, 0xcb,
	0x10, 0x55, 0xe6, 0xb0, 0x7e, 0x52, 0x63, 0x06, 0xd4, 0xd2, 0x0a, 0x58, 0x71, 0xa2, 0x8a, 0xef,
	0xcd, 0xb9, 0x66, 0x39, 0x62, 0xc9, 0xbd, 0x39, 0x4d, 0xf2, 0x2d, 0x7c, 0x48, 0x8a, 0x51, 0x32,
	0x9e, 0x94, 0x8c, 0x27, 0x54, 0x85, 0xf2, 0x43, 0xe0, 0xac, 0x66, 0xbe, 0x1f, 0x48, 0x35, 0x1b,
	0x4c, 0xfe, 0x2c, 0xc0, 0x71, 0xcb, 0x1a, 0x3a, 0xae, 0xe7, 0xb9, 0x34, 0xb0, 0xe8, 0x34, 0xa0,
	0x51, 0x97, 0xbe, 0xb0, 0x0a, 0x03, 0x55, 0x61, 0xc0, 0x50, 0x5b, 0x19, 0xd1, 0x96, 0x1b, 0xf4,
	0x5a, 0x6d, 0x10, 0xc7, 0x75, 0x5c, 0x94, 0xb8, 0xce, 0x71, 0x03, 0x1f, 0x48, 0xdc, 0x40, 0x27,
	0x70, 0x70, 0xd3, 0xf3, 0xe7, 0x43, 0x5c, 0xe2, 0x21, 0x01, 0x54, 0xb4, 0x8d, 0xdf, 0x6c, 0xa3,
	0x6d, 0x15, 0xbd, 0xc7, 0xe5, 0x6d, 0xf4, 0x1e, 0x5d, 0xc2, 0xf1, 0x98, 0x06, 0xee, 0xb3, 0xeb,
	0x4c, 0x3c, 0x6a, 0x2c, 0xa7, 0xdc, 0x83, 0x01, 0x7e, 0xcb, 0x73, 0xf2, 0x7e, 0x42, 0xf1, 0x11,
	0xdc, 0x0d, 0xb7, 0x75, 0x0c, 0x9c, 0x92, 0xfb, 0x5b, 0x3e, 0xa7, 0xa3, 0xe3, 0xc3, 0x7d, 0x9c,
	0x8e, 0xce, 0x9c, 0xe9, 0xe2, 0x4a, 0x9c, 0x70, 0x60, 0x6a, 0x5d, 0xa6, 0xbc, 0xab, 0xe3, 0x77,
	0x1c, 0xc6, 0x5f, 0xe4, 0x8f, 0x02, 0x7c, 0xd8, 0xba, 0x3b, 0x5c, 0x4f, 0xfe, 0x81, 0xb5, 0xf6,
	0xc6, 0x5a, 0x9b, 0x5b, 0x6b, 0x6f, 0xac, 0xb5, 0xb9, 0xb5, 0xf6, 0xc6, 0x5a, 0xfb, 0xff, 0x6c,
	0xed, 0x0f, 0xf0, 0x71, 0xeb, 0xec, 0xdd, 0x8a, 0x2e, 0xdd, 0xe5, 0x9c, 0x51, 0x46, 0xca, 0xda,
	0x11, 0x43, 0x86, 0xb2, 0xd6, 0x60, 0x68, 0xac, 0xae, 0xef, 0x98, 0x9b, 0x41, 0xbd, 0xc8, 0x91,
	0xde, 0x0a, 0xc0, 0xa2, 0x3d, 0x67, 0x42, 0x3d, 0xe9, 0xb0, 0x00, 0x8c, 0xd9, 0x93, 0x06, 0x6b,
	0x3d, 0x12, 0xc2, 0x59, 0x62, 0x4b, 0x33, 0x17, 0x3f, 0xee, 0x72, 0xb4, 0x79, 0xbb, 0x46, 0x7c,
	0xff, 0x0c, 0x5d, 0xf6, 0x10, 0x7f, 0x31, 0x3c, 0xde, 0xec, 0xef, 0x58, 0x47, 0xa7, 0x50, 0xe2,
	0x2b, 0xeb, 0xb2, 0x0f, 0x89, 0x58, 0x5e, 0x4f, 0x57, 0xfb, 0xdc, 0xd3, 0xc9, 0x2f, 0x5a, 0xf2,
	0x9a, 0x6e, 0x2f, 0x7a, 0xcc, 0x37, 0x1f, 0x5c, 0x6f, 0x46, 0xe5, 0x9a, 0x12, 0xa1, 0x73, 0x38,
	0x14, 0x5f, 0xb7, 0xe1, 0x80, 0xce, 0x79, 0x03, 0x65, 0x33, 0x19, 0x62, 0x4c, 0x4b, 0x30, 0x45,
	0x37, 0x12, 0x31, 0xa6, 0x95, 0x60, 0x16, 0x05, 0xd3, 0x4a, 0x33, 0xfb, 0x82, 0x29, 0xfa, 0x93,
	0x88, 0x31, 0xfb, 0x09, 0x66, 0x49, 0x30, 0x13, 0xa1, 0xfa, 0x4f, 0x1a, 0x94, 0xd5, 0x60, 0x40,
	0x5f, 0x41, 0xb1, 0x4d, 0xa3, 0x0e, 0x3a, 0x92, 0x0f, 0x9b, 0x1c, 0x1e, 0xd5, 0x63, 0x81, 0x53,
	0xb3, 0x86, 0xbc, 0x42, 0x17, 0x50, 0x6a, 0xf1, 0x49, 0x82, 0x2a, 0x22, 0x41, 0x4c, 0x8b, 0x6a,
	0x86, 0x1e, 0x67, 0x5e, 0x41, 0x59, 0x4d, 0x1d, 0x54, 0x4d, 0x17, 0x4b, 0x4e, 0xa3, 0xaa, 0xac,
	0x23, 0xa6, 0x05, 0x79, 0x55, 0xff, 0x59, 0x03, 0x50, 0x89, 0x46, 0x0b, 0xd5, 0xf6, 0xf4, 0x97,
	0xfb, 0x10, 0xc7, 0xcb, 0x5e, 0x6e, 0x1a, 0xcc, 0xcd, 0xf8, 0x17, 0x1b, 0xfd, 0x55, 0x83, 0xf7,
	0xdb, 0x27, 0x3f, 0xf2, 0xa7, 0xbe, 0x87, 0x74, 0x00, 0x79, 0x09, 0xe2, 0xda, 0x28, 0xcf, 0xc3,
	0x6a, 0xca, 0xb7, 0x78, 0xf9, 0x3e, 0xbc, 0xcf, 0x1e, 0xdf, 0x4f, 0xe5, 0x4a, 0xb9, 0xc3, 0xb1,
	0xfa, 0x37, 0x3d, 0xc6, 0xe5, 0x1a, 0xf0, 0x36, 0x71, 0x2e, 0x77, 0x0b, 0xf1, 0x12, 0x59, 0x29,
	0xbf, 0x6b, 0xf0, 0x31, 0x39, 0x45, 0x85, 0x98, 0x6f, 0x52, 0x62, 0xf2, 0xed, 0xdc, 0xb7, 0x0d,
	0x77, 0xbb, 0xaa, 0x3e, 0x4f, 0x35, 0xb3, 0x33, 0xad, 0xff, 0x0b, 0x5d, 0xbf, 0x69, 0x80, 0x52,
	0xf7, 0x55, 0x08, 0xfb, 0x3a, 0x25, 0xec, 0x13, 0x41, 0xda, 0x79, 0xc6, 0x72, 0x8e, 0x4a, 0x73,
	0x57, 0xd5, 0x17, 0x59, 0x76, 0x56, 0x56, 0x76, 0xbf, 0xaf, 0x92, 0x42, 0xce, 0x72, 0xd9, 0x79,
	0x5a, 0x26, 0x25, 0xfe, 0x2f, 0xb0, 0xf1, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xbd, 0x51,
	0x74, 0x13, 0x0a, 0x00, 0x00,
}
