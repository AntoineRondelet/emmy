// Code generated by protoc-gen-go.
// source: msgs.proto
// DO NOT EDIT!

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	msgs.proto

It has these top-level messages:
	Message
	EmptyMsg
	Status
	BigInt
	DoubleBigInt
	PedersenFirst
	PedersenDecommitment
	ECGroupElement
	SchnorrProofRandomData
	SchnorrECProofRandomData
	SchnorrProofData
	PseudonymsysNymGenProofRandomData
	PseudonymsysCACertificate
	PseudonymsysIssueProofRandomData
	PseudonymsysTranscript
	PseudonymsysCredential
	PseudonymsysTransferCredentialData
	CSPaillierSecretKey
	CSPaillierPubKey
	CSPaillierOpening
	CSPaillierProofRandomData
	CSPaillierProofData
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Valid schema types
type SchemaType int32

const (
	SchemaType_PEDERSEN                         SchemaType = 0
	SchemaType_PEDERSEN_EC                      SchemaType = 1
	SchemaType_SCHNORR                          SchemaType = 2
	SchemaType_SCHNORR_EC                       SchemaType = 3
	SchemaType_CSPAILLIER                       SchemaType = 4
	SchemaType_PSEUDONYMSYS_CA                  SchemaType = 5
	SchemaType_PSEUDONYMSYS_NYM_GEN             SchemaType = 6
	SchemaType_PSEUDONYMSYS_ISSUE_CREDENTIAL    SchemaType = 7
	SchemaType_PSEUDONYMSYS_TRANSFER_CREDENTIAL SchemaType = 8
)

var SchemaType_name = map[int32]string{
	0: "PEDERSEN",
	1: "PEDERSEN_EC",
	2: "SCHNORR",
	3: "SCHNORR_EC",
	4: "CSPAILLIER",
	5: "PSEUDONYMSYS_CA",
	6: "PSEUDONYMSYS_NYM_GEN",
	7: "PSEUDONYMSYS_ISSUE_CREDENTIAL",
	8: "PSEUDONYMSYS_TRANSFER_CREDENTIAL",
}
var SchemaType_value = map[string]int32{
	"PEDERSEN":                         0,
	"PEDERSEN_EC":                      1,
	"SCHNORR":                          2,
	"SCHNORR_EC":                       3,
	"CSPAILLIER":                       4,
	"PSEUDONYMSYS_CA":                  5,
	"PSEUDONYMSYS_NYM_GEN":             6,
	"PSEUDONYMSYS_ISSUE_CREDENTIAL":    7,
	"PSEUDONYMSYS_TRANSFER_CREDENTIAL": 8,
}

func (x SchemaType) String() string {
	return proto.EnumName(SchemaType_name, int32(x))
}
func (SchemaType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Valid schema variants
type SchemaVariant int32

const (
	SchemaVariant_SIGMA SchemaVariant = 0
	SchemaVariant_ZKP   SchemaVariant = 1
	SchemaVariant_ZKPOK SchemaVariant = 2
)

var SchemaVariant_name = map[int32]string{
	0: "SIGMA",
	1: "ZKP",
	2: "ZKPOK",
}
var SchemaVariant_value = map[string]int32{
	"SIGMA": 0,
	"ZKP":   1,
	"ZKPOK": 2,
}

func (x SchemaVariant) String() string {
	return proto.EnumName(SchemaVariant_name, int32(x))
}
func (SchemaVariant) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// A generic message
type Message struct {
	Schema        SchemaType    `protobuf:"varint,1,opt,name=schema,enum=protobuf.SchemaType" json:"schema,omitempty"`
	SchemaVariant SchemaVariant `protobuf:"varint,2,opt,name=schema_variant,json=schemaVariant,enum=protobuf.SchemaVariant" json:"schema_variant,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*Message_Empty
	//	*Message_Bigint
	//	*Message_EcGroupElement
	//	*Message_Status
	//	*Message_PedersenFirst
	//	*Message_PedersenDecommitment
	//	*Message_SchnorrProofData
	//	*Message_SchnorrProofRandomData
	//	*Message_SchnorrEcProofRandomData
	//	*Message_CsPaillierOpening
	//	*Message_CsPaillierProofData
	//	*Message_CsPaillierProofRandomData
	//	*Message_PseudonymsysCaCertificate
	//	*Message_PseudonymsysNymGenProofRandomData
	//	*Message_PseudonymsysIssueProofRandomData
	//	*Message_DoubleBigint
	//	*Message_PseudonymsysTransferCredentialData
	Content       isMessage_Content `protobuf_oneof:"content"`
	ClientId      int32             `protobuf:"varint,20,opt,name=clientId" json:"clientId,omitempty"`
	ProtocolError string            `protobuf:"bytes,21,opt,name=ProtocolError" json:"ProtocolError,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isMessage_Content interface {
	isMessage_Content()
}

type Message_Empty struct {
	Empty *EmptyMsg `protobuf:"bytes,3,opt,name=empty,oneof"`
}
type Message_Bigint struct {
	Bigint *BigInt `protobuf:"bytes,4,opt,name=bigint,oneof"`
}
type Message_EcGroupElement struct {
	EcGroupElement *ECGroupElement `protobuf:"bytes,5,opt,name=ec_group_element,json=ecGroupElement,oneof"`
}
type Message_Status struct {
	Status *Status `protobuf:"bytes,6,opt,name=status,oneof"`
}
type Message_PedersenFirst struct {
	PedersenFirst *PedersenFirst `protobuf:"bytes,7,opt,name=pedersen_first,json=pedersenFirst,oneof"`
}
type Message_PedersenDecommitment struct {
	PedersenDecommitment *PedersenDecommitment `protobuf:"bytes,8,opt,name=pedersen_decommitment,json=pedersenDecommitment,oneof"`
}
type Message_SchnorrProofData struct {
	SchnorrProofData *SchnorrProofData `protobuf:"bytes,9,opt,name=schnorr_proof_data,json=schnorrProofData,oneof"`
}
type Message_SchnorrProofRandomData struct {
	SchnorrProofRandomData *SchnorrProofRandomData `protobuf:"bytes,10,opt,name=schnorr_proof_random_data,json=schnorrProofRandomData,oneof"`
}
type Message_SchnorrEcProofRandomData struct {
	SchnorrEcProofRandomData *SchnorrECProofRandomData `protobuf:"bytes,11,opt,name=schnorr_ec_proof_random_data,json=schnorrEcProofRandomData,oneof"`
}
type Message_CsPaillierOpening struct {
	CsPaillierOpening *CSPaillierOpening `protobuf:"bytes,12,opt,name=cs_paillier_opening,json=csPaillierOpening,oneof"`
}
type Message_CsPaillierProofData struct {
	CsPaillierProofData *CSPaillierProofData `protobuf:"bytes,13,opt,name=cs_paillier_proof_data,json=csPaillierProofData,oneof"`
}
type Message_CsPaillierProofRandomData struct {
	CsPaillierProofRandomData *CSPaillierProofRandomData `protobuf:"bytes,14,opt,name=cs_paillier_proof_random_data,json=csPaillierProofRandomData,oneof"`
}
type Message_PseudonymsysCaCertificate struct {
	PseudonymsysCaCertificate *PseudonymsysCACertificate `protobuf:"bytes,15,opt,name=pseudonymsys_ca_certificate,json=pseudonymsysCaCertificate,oneof"`
}
type Message_PseudonymsysNymGenProofRandomData struct {
	PseudonymsysNymGenProofRandomData *PseudonymsysNymGenProofRandomData `protobuf:"bytes,16,opt,name=pseudonymsys_nym_gen_proof_random_data,json=pseudonymsysNymGenProofRandomData,oneof"`
}
type Message_PseudonymsysIssueProofRandomData struct {
	PseudonymsysIssueProofRandomData *PseudonymsysIssueProofRandomData `protobuf:"bytes,17,opt,name=pseudonymsys_issue_proof_random_data,json=pseudonymsysIssueProofRandomData,oneof"`
}
type Message_DoubleBigint struct {
	DoubleBigint *DoubleBigInt `protobuf:"bytes,18,opt,name=double_bigint,json=doubleBigint,oneof"`
}
type Message_PseudonymsysTransferCredentialData struct {
	PseudonymsysTransferCredentialData *PseudonymsysTransferCredentialData `protobuf:"bytes,19,opt,name=pseudonymsys_transfer_credential_data,json=pseudonymsysTransferCredentialData,oneof"`
}

func (*Message_Empty) isMessage_Content()                              {}
func (*Message_Bigint) isMessage_Content()                             {}
func (*Message_EcGroupElement) isMessage_Content()                     {}
func (*Message_Status) isMessage_Content()                             {}
func (*Message_PedersenFirst) isMessage_Content()                      {}
func (*Message_PedersenDecommitment) isMessage_Content()               {}
func (*Message_SchnorrProofData) isMessage_Content()                   {}
func (*Message_SchnorrProofRandomData) isMessage_Content()             {}
func (*Message_SchnorrEcProofRandomData) isMessage_Content()           {}
func (*Message_CsPaillierOpening) isMessage_Content()                  {}
func (*Message_CsPaillierProofData) isMessage_Content()                {}
func (*Message_CsPaillierProofRandomData) isMessage_Content()          {}
func (*Message_PseudonymsysCaCertificate) isMessage_Content()          {}
func (*Message_PseudonymsysNymGenProofRandomData) isMessage_Content()  {}
func (*Message_PseudonymsysIssueProofRandomData) isMessage_Content()   {}
func (*Message_DoubleBigint) isMessage_Content()                       {}
func (*Message_PseudonymsysTransferCredentialData) isMessage_Content() {}

func (m *Message) GetContent() isMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Message) GetEmpty() *EmptyMsg {
	if x, ok := m.GetContent().(*Message_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *Message) GetBigint() *BigInt {
	if x, ok := m.GetContent().(*Message_Bigint); ok {
		return x.Bigint
	}
	return nil
}

func (m *Message) GetEcGroupElement() *ECGroupElement {
	if x, ok := m.GetContent().(*Message_EcGroupElement); ok {
		return x.EcGroupElement
	}
	return nil
}

func (m *Message) GetStatus() *Status {
	if x, ok := m.GetContent().(*Message_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Message) GetPedersenFirst() *PedersenFirst {
	if x, ok := m.GetContent().(*Message_PedersenFirst); ok {
		return x.PedersenFirst
	}
	return nil
}

func (m *Message) GetPedersenDecommitment() *PedersenDecommitment {
	if x, ok := m.GetContent().(*Message_PedersenDecommitment); ok {
		return x.PedersenDecommitment
	}
	return nil
}

func (m *Message) GetSchnorrProofData() *SchnorrProofData {
	if x, ok := m.GetContent().(*Message_SchnorrProofData); ok {
		return x.SchnorrProofData
	}
	return nil
}

func (m *Message) GetSchnorrProofRandomData() *SchnorrProofRandomData {
	if x, ok := m.GetContent().(*Message_SchnorrProofRandomData); ok {
		return x.SchnorrProofRandomData
	}
	return nil
}

func (m *Message) GetSchnorrEcProofRandomData() *SchnorrECProofRandomData {
	if x, ok := m.GetContent().(*Message_SchnorrEcProofRandomData); ok {
		return x.SchnorrEcProofRandomData
	}
	return nil
}

func (m *Message) GetCsPaillierOpening() *CSPaillierOpening {
	if x, ok := m.GetContent().(*Message_CsPaillierOpening); ok {
		return x.CsPaillierOpening
	}
	return nil
}

func (m *Message) GetCsPaillierProofData() *CSPaillierProofData {
	if x, ok := m.GetContent().(*Message_CsPaillierProofData); ok {
		return x.CsPaillierProofData
	}
	return nil
}

func (m *Message) GetCsPaillierProofRandomData() *CSPaillierProofRandomData {
	if x, ok := m.GetContent().(*Message_CsPaillierProofRandomData); ok {
		return x.CsPaillierProofRandomData
	}
	return nil
}

func (m *Message) GetPseudonymsysCaCertificate() *PseudonymsysCACertificate {
	if x, ok := m.GetContent().(*Message_PseudonymsysCaCertificate); ok {
		return x.PseudonymsysCaCertificate
	}
	return nil
}

func (m *Message) GetPseudonymsysNymGenProofRandomData() *PseudonymsysNymGenProofRandomData {
	if x, ok := m.GetContent().(*Message_PseudonymsysNymGenProofRandomData); ok {
		return x.PseudonymsysNymGenProofRandomData
	}
	return nil
}

func (m *Message) GetPseudonymsysIssueProofRandomData() *PseudonymsysIssueProofRandomData {
	if x, ok := m.GetContent().(*Message_PseudonymsysIssueProofRandomData); ok {
		return x.PseudonymsysIssueProofRandomData
	}
	return nil
}

func (m *Message) GetDoubleBigint() *DoubleBigInt {
	if x, ok := m.GetContent().(*Message_DoubleBigint); ok {
		return x.DoubleBigint
	}
	return nil
}

func (m *Message) GetPseudonymsysTransferCredentialData() *PseudonymsysTransferCredentialData {
	if x, ok := m.GetContent().(*Message_PseudonymsysTransferCredentialData); ok {
		return x.PseudonymsysTransferCredentialData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Empty)(nil),
		(*Message_Bigint)(nil),
		(*Message_EcGroupElement)(nil),
		(*Message_Status)(nil),
		(*Message_PedersenFirst)(nil),
		(*Message_PedersenDecommitment)(nil),
		(*Message_SchnorrProofData)(nil),
		(*Message_SchnorrProofRandomData)(nil),
		(*Message_SchnorrEcProofRandomData)(nil),
		(*Message_CsPaillierOpening)(nil),
		(*Message_CsPaillierProofData)(nil),
		(*Message_CsPaillierProofRandomData)(nil),
		(*Message_PseudonymsysCaCertificate)(nil),
		(*Message_PseudonymsysNymGenProofRandomData)(nil),
		(*Message_PseudonymsysIssueProofRandomData)(nil),
		(*Message_DoubleBigint)(nil),
		(*Message_PseudonymsysTransferCredentialData)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Empty:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Empty); err != nil {
			return err
		}
	case *Message_Bigint:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bigint); err != nil {
			return err
		}
	case *Message_EcGroupElement:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcGroupElement); err != nil {
			return err
		}
	case *Message_Status:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case *Message_PedersenFirst:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PedersenFirst); err != nil {
			return err
		}
	case *Message_PedersenDecommitment:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PedersenDecommitment); err != nil {
			return err
		}
	case *Message_SchnorrProofData:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SchnorrProofData); err != nil {
			return err
		}
	case *Message_SchnorrProofRandomData:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SchnorrProofRandomData); err != nil {
			return err
		}
	case *Message_SchnorrEcProofRandomData:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SchnorrEcProofRandomData); err != nil {
			return err
		}
	case *Message_CsPaillierOpening:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CsPaillierOpening); err != nil {
			return err
		}
	case *Message_CsPaillierProofData:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CsPaillierProofData); err != nil {
			return err
		}
	case *Message_CsPaillierProofRandomData:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CsPaillierProofRandomData); err != nil {
			return err
		}
	case *Message_PseudonymsysCaCertificate:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysCaCertificate); err != nil {
			return err
		}
	case *Message_PseudonymsysNymGenProofRandomData:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysNymGenProofRandomData); err != nil {
			return err
		}
	case *Message_PseudonymsysIssueProofRandomData:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysIssueProofRandomData); err != nil {
			return err
		}
	case *Message_DoubleBigint:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoubleBigint); err != nil {
			return err
		}
	case *Message_PseudonymsysTransferCredentialData:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysTransferCredentialData); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Content has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // content.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmptyMsg)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Empty{msg}
		return true, err
	case 4: // content.bigint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BigInt)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Bigint{msg}
		return true, err
	case 5: // content.ec_group_element
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ECGroupElement)
		err := b.DecodeMessage(msg)
		m.Content = &Message_EcGroupElement{msg}
		return true, err
	case 6: // content.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Status)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Status{msg}
		return true, err
	case 7: // content.pedersen_first
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PedersenFirst)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PedersenFirst{msg}
		return true, err
	case 8: // content.pedersen_decommitment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PedersenDecommitment)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PedersenDecommitment{msg}
		return true, err
	case 9: // content.schnorr_proof_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SchnorrProofData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SchnorrProofData{msg}
		return true, err
	case 10: // content.schnorr_proof_random_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SchnorrProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SchnorrProofRandomData{msg}
		return true, err
	case 11: // content.schnorr_ec_proof_random_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SchnorrECProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SchnorrEcProofRandomData{msg}
		return true, err
	case 12: // content.cs_paillier_opening
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CSPaillierOpening)
		err := b.DecodeMessage(msg)
		m.Content = &Message_CsPaillierOpening{msg}
		return true, err
	case 13: // content.cs_paillier_proof_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CSPaillierProofData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_CsPaillierProofData{msg}
		return true, err
	case 14: // content.cs_paillier_proof_random_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CSPaillierProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_CsPaillierProofRandomData{msg}
		return true, err
	case 15: // content.pseudonymsys_ca_certificate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PseudonymsysCACertificate)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysCaCertificate{msg}
		return true, err
	case 16: // content.pseudonymsys_nym_gen_proof_random_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PseudonymsysNymGenProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysNymGenProofRandomData{msg}
		return true, err
	case 17: // content.pseudonymsys_issue_proof_random_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PseudonymsysIssueProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysIssueProofRandomData{msg}
		return true, err
	case 18: // content.double_bigint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DoubleBigInt)
		err := b.DecodeMessage(msg)
		m.Content = &Message_DoubleBigint{msg}
		return true, err
	case 19: // content.pseudonymsys_transfer_credential_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PseudonymsysTransferCredentialData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysTransferCredentialData{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Empty:
		s := proto.Size(x.Empty)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Bigint:
		s := proto.Size(x.Bigint)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_EcGroupElement:
		s := proto.Size(x.EcGroupElement)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Status:
		s := proto.Size(x.Status)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PedersenFirst:
		s := proto.Size(x.PedersenFirst)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PedersenDecommitment:
		s := proto.Size(x.PedersenDecommitment)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_SchnorrProofData:
		s := proto.Size(x.SchnorrProofData)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_SchnorrProofRandomData:
		s := proto.Size(x.SchnorrProofRandomData)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_SchnorrEcProofRandomData:
		s := proto.Size(x.SchnorrEcProofRandomData)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_CsPaillierOpening:
		s := proto.Size(x.CsPaillierOpening)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_CsPaillierProofData:
		s := proto.Size(x.CsPaillierProofData)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_CsPaillierProofRandomData:
		s := proto.Size(x.CsPaillierProofRandomData)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysCaCertificate:
		s := proto.Size(x.PseudonymsysCaCertificate)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysNymGenProofRandomData:
		s := proto.Size(x.PseudonymsysNymGenProofRandomData)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysIssueProofRandomData:
		s := proto.Size(x.PseudonymsysIssueProofRandomData)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_DoubleBigint:
		s := proto.Size(x.DoubleBigint)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysTransferCredentialData:
		s := proto.Size(x.PseudonymsysTransferCredentialData)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()                    { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string            { return proto.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()               {}
func (*EmptyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Status struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type BigInt struct {
	X1 []byte `protobuf:"bytes,1,opt,name=X1,proto3" json:"X1,omitempty"`
}

func (m *BigInt) Reset()                    { *m = BigInt{} }
func (m *BigInt) String() string            { return proto.CompactTextString(m) }
func (*BigInt) ProtoMessage()               {}
func (*BigInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DoubleBigInt struct {
	X1 []byte `protobuf:"bytes,1,opt,name=X1,proto3" json:"X1,omitempty"`
	X2 []byte `protobuf:"bytes,2,opt,name=X2,proto3" json:"X2,omitempty"`
}

func (m *DoubleBigInt) Reset()                    { *m = DoubleBigInt{} }
func (m *DoubleBigInt) String() string            { return proto.CompactTextString(m) }
func (*DoubleBigInt) ProtoMessage()               {}
func (*DoubleBigInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PedersenFirst struct {
	H []byte `protobuf:"bytes,1,opt,name=H,proto3" json:"H,omitempty"`
}

func (m *PedersenFirst) Reset()                    { *m = PedersenFirst{} }
func (m *PedersenFirst) String() string            { return proto.CompactTextString(m) }
func (*PedersenFirst) ProtoMessage()               {}
func (*PedersenFirst) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PedersenDecommitment struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	R []byte `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
}

func (m *PedersenDecommitment) Reset()                    { *m = PedersenDecommitment{} }
func (m *PedersenDecommitment) String() string            { return proto.CompactTextString(m) }
func (*PedersenDecommitment) ProtoMessage()               {}
func (*PedersenDecommitment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ECGroupElement struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *ECGroupElement) Reset()                    { *m = ECGroupElement{} }
func (m *ECGroupElement) String() string            { return proto.CompactTextString(m) }
func (*ECGroupElement) ProtoMessage()               {}
func (*ECGroupElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type SchnorrProofRandomData struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	A []byte `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	B []byte `protobuf:"bytes,3,opt,name=B,proto3" json:"B,omitempty"`
}

func (m *SchnorrProofRandomData) Reset()                    { *m = SchnorrProofRandomData{} }
func (m *SchnorrProofRandomData) String() string            { return proto.CompactTextString(m) }
func (*SchnorrProofRandomData) ProtoMessage()               {}
func (*SchnorrProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type SchnorrECProofRandomData struct {
	X *ECGroupElement `protobuf:"bytes,1,opt,name=X" json:"X,omitempty"`
	A *ECGroupElement `protobuf:"bytes,2,opt,name=A" json:"A,omitempty"`
	B *ECGroupElement `protobuf:"bytes,3,opt,name=B" json:"B,omitempty"`
}

func (m *SchnorrECProofRandomData) Reset()                    { *m = SchnorrECProofRandomData{} }
func (m *SchnorrECProofRandomData) String() string            { return proto.CompactTextString(m) }
func (*SchnorrECProofRandomData) ProtoMessage()               {}
func (*SchnorrECProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SchnorrECProofRandomData) GetX() *ECGroupElement {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *SchnorrECProofRandomData) GetA() *ECGroupElement {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *SchnorrECProofRandomData) GetB() *ECGroupElement {
	if m != nil {
		return m.B
	}
	return nil
}

type SchnorrProofData struct {
	Z        []byte `protobuf:"bytes,1,opt,name=Z,proto3" json:"Z,omitempty"`
	Trapdoor []byte `protobuf:"bytes,2,opt,name=Trapdoor,proto3" json:"Trapdoor,omitempty"`
}

func (m *SchnorrProofData) Reset()                    { *m = SchnorrProofData{} }
func (m *SchnorrProofData) String() string            { return proto.CompactTextString(m) }
func (*SchnorrProofData) ProtoMessage()               {}
func (*SchnorrProofData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type PseudonymsysNymGenProofRandomData struct {
	X1 []byte `protobuf:"bytes,1,opt,name=X1,proto3" json:"X1,omitempty"`
	A1 []byte `protobuf:"bytes,2,opt,name=A1,proto3" json:"A1,omitempty"`
	B1 []byte `protobuf:"bytes,3,opt,name=B1,proto3" json:"B1,omitempty"`
	X2 []byte `protobuf:"bytes,4,opt,name=X2,proto3" json:"X2,omitempty"`
	A2 []byte `protobuf:"bytes,5,opt,name=A2,proto3" json:"A2,omitempty"`
	B2 []byte `protobuf:"bytes,6,opt,name=B2,proto3" json:"B2,omitempty"`
	R  []byte `protobuf:"bytes,7,opt,name=R,proto3" json:"R,omitempty"`
	S  []byte `protobuf:"bytes,8,opt,name=S,proto3" json:"S,omitempty"`
}

func (m *PseudonymsysNymGenProofRandomData) Reset()         { *m = PseudonymsysNymGenProofRandomData{} }
func (m *PseudonymsysNymGenProofRandomData) String() string { return proto.CompactTextString(m) }
func (*PseudonymsysNymGenProofRandomData) ProtoMessage()    {}
func (*PseudonymsysNymGenProofRandomData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11}
}

type PseudonymsysCACertificate struct {
	BlindedA []byte `protobuf:"bytes,1,opt,name=BlindedA,proto3" json:"BlindedA,omitempty"`
	BlindedB []byte `protobuf:"bytes,2,opt,name=BlindedB,proto3" json:"BlindedB,omitempty"`
	R        []byte `protobuf:"bytes,3,opt,name=R,proto3" json:"R,omitempty"`
	S        []byte `protobuf:"bytes,4,opt,name=S,proto3" json:"S,omitempty"`
}

func (m *PseudonymsysCACertificate) Reset()                    { *m = PseudonymsysCACertificate{} }
func (m *PseudonymsysCACertificate) String() string            { return proto.CompactTextString(m) }
func (*PseudonymsysCACertificate) ProtoMessage()               {}
func (*PseudonymsysCACertificate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type PseudonymsysIssueProofRandomData struct {
	X11 []byte `protobuf:"bytes,1,opt,name=X11,proto3" json:"X11,omitempty"`
	X12 []byte `protobuf:"bytes,2,opt,name=X12,proto3" json:"X12,omitempty"`
	X21 []byte `protobuf:"bytes,3,opt,name=X21,proto3" json:"X21,omitempty"`
	X22 []byte `protobuf:"bytes,4,opt,name=X22,proto3" json:"X22,omitempty"`
	A   []byte `protobuf:"bytes,5,opt,name=A,proto3" json:"A,omitempty"`
	B   []byte `protobuf:"bytes,6,opt,name=B,proto3" json:"B,omitempty"`
}

func (m *PseudonymsysIssueProofRandomData) Reset()         { *m = PseudonymsysIssueProofRandomData{} }
func (m *PseudonymsysIssueProofRandomData) String() string { return proto.CompactTextString(m) }
func (*PseudonymsysIssueProofRandomData) ProtoMessage()    {}
func (*PseudonymsysIssueProofRandomData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13}
}

type PseudonymsysTranscript struct {
	A      []byte `protobuf:"bytes,1,opt,name=A,proto3" json:"A,omitempty"`
	B      []byte `protobuf:"bytes,2,opt,name=B,proto3" json:"B,omitempty"`
	Hash   []byte `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ZAlpha []byte `protobuf:"bytes,4,opt,name=ZAlpha,proto3" json:"ZAlpha,omitempty"`
}

func (m *PseudonymsysTranscript) Reset()                    { *m = PseudonymsysTranscript{} }
func (m *PseudonymsysTranscript) String() string            { return proto.CompactTextString(m) }
func (*PseudonymsysTranscript) ProtoMessage()               {}
func (*PseudonymsysTranscript) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type PseudonymsysCredential struct {
	SmallAToGamma []byte                  `protobuf:"bytes,1,opt,name=SmallAToGamma,proto3" json:"SmallAToGamma,omitempty"`
	SmallBToGamma []byte                  `protobuf:"bytes,2,opt,name=SmallBToGamma,proto3" json:"SmallBToGamma,omitempty"`
	AToGamma      []byte                  `protobuf:"bytes,3,opt,name=AToGamma,proto3" json:"AToGamma,omitempty"`
	BToGamma      []byte                  `protobuf:"bytes,4,opt,name=BToGamma,proto3" json:"BToGamma,omitempty"`
	T1            *PseudonymsysTranscript `protobuf:"bytes,5,opt,name=T1" json:"T1,omitempty"`
	T2            *PseudonymsysTranscript `protobuf:"bytes,6,opt,name=T2" json:"T2,omitempty"`
}

func (m *PseudonymsysCredential) Reset()                    { *m = PseudonymsysCredential{} }
func (m *PseudonymsysCredential) String() string            { return proto.CompactTextString(m) }
func (*PseudonymsysCredential) ProtoMessage()               {}
func (*PseudonymsysCredential) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PseudonymsysCredential) GetT1() *PseudonymsysTranscript {
	if m != nil {
		return m.T1
	}
	return nil
}

func (m *PseudonymsysCredential) GetT2() *PseudonymsysTranscript {
	if m != nil {
		return m.T2
	}
	return nil
}

type PseudonymsysTransferCredentialData struct {
	OrgName    string                  `protobuf:"bytes,1,opt,name=OrgName" json:"OrgName,omitempty"`
	X1         []byte                  `protobuf:"bytes,2,opt,name=X1,proto3" json:"X1,omitempty"`
	X2         []byte                  `protobuf:"bytes,3,opt,name=X2,proto3" json:"X2,omitempty"`
	NymA       []byte                  `protobuf:"bytes,4,opt,name=NymA,proto3" json:"NymA,omitempty"`
	NymB       []byte                  `protobuf:"bytes,5,opt,name=NymB,proto3" json:"NymB,omitempty"`
	Credential *PseudonymsysCredential `protobuf:"bytes,6,opt,name=Credential" json:"Credential,omitempty"`
}

func (m *PseudonymsysTransferCredentialData) Reset()         { *m = PseudonymsysTransferCredentialData{} }
func (m *PseudonymsysTransferCredentialData) String() string { return proto.CompactTextString(m) }
func (*PseudonymsysTransferCredentialData) ProtoMessage()    {}
func (*PseudonymsysTransferCredentialData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16}
}

func (m *PseudonymsysTransferCredentialData) GetCredential() *PseudonymsysCredential {
	if m != nil {
		return m.Credential
	}
	return nil
}

type CSPaillierSecretKey struct {
	N                    []byte `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	G                    []byte `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`
	X1                   []byte `protobuf:"bytes,3,opt,name=X1,proto3" json:"X1,omitempty"`
	X2                   []byte `protobuf:"bytes,4,opt,name=X2,proto3" json:"X2,omitempty"`
	X3                   []byte `protobuf:"bytes,5,opt,name=X3,proto3" json:"X3,omitempty"`
	DLogP                []byte `protobuf:"bytes,6,opt,name=DLogP,proto3" json:"DLogP,omitempty"`
	DLogG                []byte `protobuf:"bytes,7,opt,name=DLogG,proto3" json:"DLogG,omitempty"`
	DLogQ                []byte `protobuf:"bytes,8,opt,name=DLogQ,proto3" json:"DLogQ,omitempty"`
	VerifiableEncGroupN  []byte `protobuf:"bytes,9,opt,name=VerifiableEncGroupN,proto3" json:"VerifiableEncGroupN,omitempty"`
	VerifiableEncGroupG1 []byte `protobuf:"bytes,10,opt,name=VerifiableEncGroupG1,proto3" json:"VerifiableEncGroupG1,omitempty"`
	VerifiableEncGroupH1 []byte `protobuf:"bytes,11,opt,name=VerifiableEncGroupH1,proto3" json:"VerifiableEncGroupH1,omitempty"`
	K                    int32  `protobuf:"varint,12,opt,name=K" json:"K,omitempty"`
	K1                   int32  `protobuf:"varint,13,opt,name=K1" json:"K1,omitempty"`
}

func (m *CSPaillierSecretKey) Reset()                    { *m = CSPaillierSecretKey{} }
func (m *CSPaillierSecretKey) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierSecretKey) ProtoMessage()               {}
func (*CSPaillierSecretKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type CSPaillierPubKey struct {
	N                    []byte `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	G                    []byte `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`
	Y1                   []byte `protobuf:"bytes,3,opt,name=Y1,proto3" json:"Y1,omitempty"`
	Y2                   []byte `protobuf:"bytes,4,opt,name=Y2,proto3" json:"Y2,omitempty"`
	Y3                   []byte `protobuf:"bytes,5,opt,name=Y3,proto3" json:"Y3,omitempty"`
	DLogP                []byte `protobuf:"bytes,6,opt,name=DLogP,proto3" json:"DLogP,omitempty"`
	DLogG                []byte `protobuf:"bytes,7,opt,name=DLogG,proto3" json:"DLogG,omitempty"`
	DLogQ                []byte `protobuf:"bytes,8,opt,name=DLogQ,proto3" json:"DLogQ,omitempty"`
	VerifiableEncGroupN  []byte `protobuf:"bytes,9,opt,name=VerifiableEncGroupN,proto3" json:"VerifiableEncGroupN,omitempty"`
	VerifiableEncGroupG1 []byte `protobuf:"bytes,10,opt,name=VerifiableEncGroupG1,proto3" json:"VerifiableEncGroupG1,omitempty"`
	VerifiableEncGroupH1 []byte `protobuf:"bytes,11,opt,name=VerifiableEncGroupH1,proto3" json:"VerifiableEncGroupH1,omitempty"`
	K                    int32  `protobuf:"varint,12,opt,name=K" json:"K,omitempty"`
	K1                   int32  `protobuf:"varint,13,opt,name=K1" json:"K1,omitempty"`
}

func (m *CSPaillierPubKey) Reset()                    { *m = CSPaillierPubKey{} }
func (m *CSPaillierPubKey) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierPubKey) ProtoMessage()               {}
func (*CSPaillierPubKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type CSPaillierOpening struct {
	U     []byte `protobuf:"bytes,1,opt,name=U,proto3" json:"U,omitempty"`
	E     []byte `protobuf:"bytes,2,opt,name=E,proto3" json:"E,omitempty"`
	V     []byte `protobuf:"bytes,3,opt,name=V,proto3" json:"V,omitempty"`
	Delta []byte `protobuf:"bytes,4,opt,name=Delta,proto3" json:"Delta,omitempty"`
	Label []byte `protobuf:"bytes,5,opt,name=Label,proto3" json:"Label,omitempty"`
	L     []byte `protobuf:"bytes,6,opt,name=L,proto3" json:"L,omitempty"`
}

func (m *CSPaillierOpening) Reset()                    { *m = CSPaillierOpening{} }
func (m *CSPaillierOpening) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierOpening) ProtoMessage()               {}
func (*CSPaillierOpening) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type CSPaillierProofRandomData struct {
	U1     []byte `protobuf:"bytes,1,opt,name=U1,proto3" json:"U1,omitempty"`
	E1     []byte `protobuf:"bytes,2,opt,name=E1,proto3" json:"E1,omitempty"`
	V1     []byte `protobuf:"bytes,3,opt,name=V1,proto3" json:"V1,omitempty"`
	Delta1 []byte `protobuf:"bytes,4,opt,name=Delta1,proto3" json:"Delta1,omitempty"`
	L1     []byte `protobuf:"bytes,5,opt,name=L1,proto3" json:"L1,omitempty"`
}

func (m *CSPaillierProofRandomData) Reset()                    { *m = CSPaillierProofRandomData{} }
func (m *CSPaillierProofRandomData) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierProofRandomData) ProtoMessage()               {}
func (*CSPaillierProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type CSPaillierProofData struct {
	RTilde      []byte `protobuf:"bytes,1,opt,name=RTilde,proto3" json:"RTilde,omitempty"`
	RTildeIsNeg bool   `protobuf:"varint,2,opt,name=RTildeIsNeg" json:"RTildeIsNeg,omitempty"`
	STilde      []byte `protobuf:"bytes,3,opt,name=STilde,proto3" json:"STilde,omitempty"`
	STildeIsNeg bool   `protobuf:"varint,4,opt,name=STildeIsNeg" json:"STildeIsNeg,omitempty"`
	MTilde      []byte `protobuf:"bytes,5,opt,name=MTilde,proto3" json:"MTilde,omitempty"`
	MTildeIsNeg bool   `protobuf:"varint,6,opt,name=MTildeIsNeg" json:"MTildeIsNeg,omitempty"`
}

func (m *CSPaillierProofData) Reset()                    { *m = CSPaillierProofData{} }
func (m *CSPaillierProofData) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierProofData) ProtoMessage()               {}
func (*CSPaillierProofData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func init() {
	proto.RegisterType((*Message)(nil), "protobuf.Message")
	proto.RegisterType((*EmptyMsg)(nil), "protobuf.EmptyMsg")
	proto.RegisterType((*Status)(nil), "protobuf.Status")
	proto.RegisterType((*BigInt)(nil), "protobuf.BigInt")
	proto.RegisterType((*DoubleBigInt)(nil), "protobuf.DoubleBigInt")
	proto.RegisterType((*PedersenFirst)(nil), "protobuf.PedersenFirst")
	proto.RegisterType((*PedersenDecommitment)(nil), "protobuf.PedersenDecommitment")
	proto.RegisterType((*ECGroupElement)(nil), "protobuf.ECGroupElement")
	proto.RegisterType((*SchnorrProofRandomData)(nil), "protobuf.SchnorrProofRandomData")
	proto.RegisterType((*SchnorrECProofRandomData)(nil), "protobuf.SchnorrECProofRandomData")
	proto.RegisterType((*SchnorrProofData)(nil), "protobuf.SchnorrProofData")
	proto.RegisterType((*PseudonymsysNymGenProofRandomData)(nil), "protobuf.PseudonymsysNymGenProofRandomData")
	proto.RegisterType((*PseudonymsysCACertificate)(nil), "protobuf.PseudonymsysCACertificate")
	proto.RegisterType((*PseudonymsysIssueProofRandomData)(nil), "protobuf.PseudonymsysIssueProofRandomData")
	proto.RegisterType((*PseudonymsysTranscript)(nil), "protobuf.PseudonymsysTranscript")
	proto.RegisterType((*PseudonymsysCredential)(nil), "protobuf.PseudonymsysCredential")
	proto.RegisterType((*PseudonymsysTransferCredentialData)(nil), "protobuf.PseudonymsysTransferCredentialData")
	proto.RegisterType((*CSPaillierSecretKey)(nil), "protobuf.CSPaillierSecretKey")
	proto.RegisterType((*CSPaillierPubKey)(nil), "protobuf.CSPaillierPubKey")
	proto.RegisterType((*CSPaillierOpening)(nil), "protobuf.CSPaillierOpening")
	proto.RegisterType((*CSPaillierProofRandomData)(nil), "protobuf.CSPaillierProofRandomData")
	proto.RegisterType((*CSPaillierProofData)(nil), "protobuf.CSPaillierProofData")
	proto.RegisterEnum("protobuf.SchemaType", SchemaType_name, SchemaType_value)
	proto.RegisterEnum("protobuf.SchemaVariant", SchemaVariant_name, SchemaVariant_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Protocol service

type ProtocolClient interface {
	Run(ctx context.Context, opts ...grpc.CallOption) (Protocol_RunClient, error)
}

type protocolClient struct {
	cc *grpc.ClientConn
}

func NewProtocolClient(cc *grpc.ClientConn) ProtocolClient {
	return &protocolClient{cc}
}

func (c *protocolClient) Run(ctx context.Context, opts ...grpc.CallOption) (Protocol_RunClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Protocol_serviceDesc.Streams[0], c.cc, "/protobuf.Protocol/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolRunClient{stream}
	return x, nil
}

type Protocol_RunClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type protocolRunClient struct {
	grpc.ClientStream
}

func (x *protocolRunClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *protocolRunClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Protocol service

type ProtocolServer interface {
	Run(Protocol_RunServer) error
}

func RegisterProtocolServer(s *grpc.Server, srv ProtocolServer) {
	s.RegisterService(&_Protocol_serviceDesc, srv)
}

func _Protocol_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProtocolServer).Run(&protocolRunServer{stream})
}

type Protocol_RunServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type protocolRunServer struct {
	grpc.ServerStream
}

func (x *protocolRunServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *protocolRunServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Protocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Protocol",
	HandlerType: (*ProtocolServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _Protocol_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "msgs.proto",
}

func init() { proto.RegisterFile("msgs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe4, 0x58, 0xdd, 0x6e, 0xdb, 0x46,
	0x16, 0x0e, 0x25, 0x4b, 0x96, 0x8f, 0x65, 0x47, 0x1e, 0x3b, 0x5e, 0x39, 0x59, 0x2f, 0x1c, 0x6e,
	0x36, 0x08, 0xbc, 0x81, 0x11, 0x29, 0xb7, 0x9b, 0xc5, 0x4a, 0x32, 0x23, 0x6b, 0x2d, 0xcb, 0x5a,
	0x52, 0x36, 0x2c, 0x03, 0x0b, 0x96, 0xa6, 0xc6, 0x0a, 0x01, 0x89, 0x24, 0x48, 0xaa, 0x85, 0x81,
	0x5e, 0xa4, 0x37, 0x7d, 0x80, 0xbe, 0x40, 0x1f, 0xa6, 0x37, 0xbd, 0xec, 0x65, 0x81, 0x3e, 0x45,
	0xdf, 0xa0, 0xf3, 0x4b, 0x91, 0x12, 0x6d, 0xe7, 0xbe, 0x57, 0x9a, 0x73, 0xe6, 0xfb, 0xce, 0x37,
	0x73, 0x66, 0x78, 0xe6, 0x40, 0x00, 0xd3, 0x70, 0x1c, 0x1e, 0xf9, 0x81, 0x17, 0x79, 0xa8, 0xc4,
	0x7e, 0x6e, 0x66, 0xb7, 0xea, 0xef, 0x65, 0x58, 0x3d, 0xc3, 0x61, 0x68, 0x8d, 0x31, 0x7a, 0x0b,
	0xc5, 0xd0, 0xfe, 0x84, 0xa7, 0x56, 0x55, 0x39, 0x50, 0xde, 0x6c, 0xd6, 0x77, 0x8e, 0x24, 0xec,
	0xc8, 0x60, 0xfe, 0xc1, 0x9d, 0x8f, 0x75, 0x81, 0x41, 0xff, 0x86, 0x4d, 0x3e, 0x32, 0xbf, 0xb6,
	0x02, 0xc7, 0x72, 0xa3, 0x6a, 0x8e, 0xb1, 0xfe, 0xb2, 0xc8, 0xba, 0xe4, 0xd3, 0xfa, 0x46, 0x98,
	0x34, 0xd1, 0x21, 0x14, 0xf0, 0xd4, 0x8f, 0xee, 0xaa, 0x79, 0x42, 0x5b, 0xaf, 0xa3, 0x39, 0x4d,
	0xa3, 0xee, 0xb3, 0x70, 0x7c, 0xf2, 0x44, 0xe7, 0x10, 0x82, 0x2d, 0xde, 0x38, 0x63, 0x87, 0x68,
	0xac, 0x30, 0x70, 0x65, 0x0e, 0x6e, 0x3a, 0xe3, 0x8e, 0x1b, 0x11, 0xa8, 0x40, 0xa0, 0x63, 0xa8,
	0x60, 0xdb, 0x1c, 0x07, 0xde, 0xcc, 0x37, 0xf1, 0x04, 0x4f, 0x31, 0x61, 0x15, 0x18, 0xab, 0x9a,
	0x90, 0x68, 0xb5, 0x29, 0x40, 0xe3, 0xf3, 0x84, 0xbd, 0x89, 0xed, 0xa4, 0x87, 0x2a, 0x86, 0x91,
	0x15, 0xcd, 0xc2, 0x6a, 0x71, 0x51, 0xd1, 0x60, 0x7e, 0xaa, 0xc8, 0x11, 0xe8, 0x3f, 0xb0, 0xe9,
	0xe3, 0x11, 0x0e, 0x42, 0xec, 0x9a, 0xb7, 0x4e, 0x10, 0x46, 0xd5, 0x55, 0xc6, 0x49, 0x64, 0xa2,
	0x2f, 0xe6, 0x3f, 0xd2, 0x69, 0x42, 0xdd, 0xf0, 0x93, 0x0e, 0x74, 0x01, 0xcf, 0xe2, 0x08, 0x23,
	0x6c, 0x7b, 0xd3, 0xa9, 0x13, 0xb1, 0x85, 0x97, 0x58, 0xa0, 0xbf, 0x2d, 0x07, 0x3a, 0x4e, 0xa0,
	0x48, 0xbc, 0x1d, 0x3f, 0xc3, 0x8f, 0xfe, 0x0b, 0x88, 0xe4, 0xdc, 0xf5, 0x82, 0xc0, 0x24, 0x01,
	0xbc, 0x5b, 0x73, 0x64, 0x45, 0x56, 0x75, 0x8d, 0xc5, 0x7c, 0x9e, 0x3a, 0x26, 0x8a, 0xe9, 0x53,
	0xc8, 0x31, 0x41, 0x90, 0x78, 0x95, 0x70, 0xc1, 0x87, 0xfe, 0x0f, 0x7b, 0xe9, 0x58, 0x81, 0xe5,
	0x8e, 0xbc, 0x29, 0x0f, 0x09, 0x2c, 0xe4, 0x41, 0x76, 0x48, 0x9d, 0x01, 0x45, 0xe0, 0xdd, 0x30,
	0x73, 0x06, 0x8d, 0xe0, 0xaf, 0x32, 0x3c, 0x39, 0xbd, 0x65, 0x85, 0x75, 0xa6, 0xa0, 0x2e, 0x29,
	0x68, 0xad, 0x65, 0x8d, 0xaa, 0x88, 0xa4, 0xd9, 0x8b, 0x2a, 0x67, 0xb0, 0x6d, 0x87, 0xa6, 0x6f,
	0x39, 0x93, 0x89, 0x83, 0x03, 0xd3, 0xf3, 0xb1, 0xeb, 0xb8, 0xe3, 0x6a, 0x99, 0x05, 0x7f, 0x31,
	0x0f, 0xde, 0x32, 0xfa, 0x02, 0x73, 0xce, 0x21, 0x24, 0xea, 0x96, 0x1d, 0x2e, 0x38, 0xd1, 0x00,
	0x76, 0x93, 0xe1, 0x12, 0x39, 0xde, 0x60, 0x11, 0xf7, 0xb3, 0x22, 0x26, 0xd3, 0xbc, 0x3d, 0x8f,
	0x39, 0xcf, 0xf4, 0x18, 0xf6, 0x97, 0xa3, 0x26, 0x73, 0xb1, 0xc9, 0x82, 0xff, 0xfd, 0xde, 0xe0,
	0xa9, 0x64, 0xec, 0x2d, 0x48, 0x24, 0xb2, 0x81, 0xe1, 0x85, 0x1f, 0xe2, 0xd9, 0xc8, 0x73, 0xef,
	0xa6, 0xe1, 0x5d, 0x68, 0xda, 0x96, 0x69, 0xe3, 0x20, 0x72, 0x6e, 0x1d, 0xdb, 0x8a, 0x70, 0xf5,
	0xe9, 0xa2, 0x4c, 0x3f, 0x01, 0x6e, 0x35, 0x5a, 0x73, 0x28, 0x95, 0x49, 0x46, 0x6a, 0x59, 0x89,
	0x49, 0xf4, 0x59, 0x81, 0xd7, 0x29, 0x1d, 0xf2, 0x63, 0x8e, 0xc9, 0x4d, 0x5f, 0xde, 0x59, 0x85,
	0x49, 0xfe, 0x33, 0x5b, 0xb2, 0x77, 0x37, 0x6d, 0x63, 0x77, 0x79, 0x87, 0x2f, 0xfd, 0xc7, 0x40,
	0xe8, 0x5b, 0x78, 0x95, 0x5a, 0x81, 0x13, 0x86, 0x33, 0x9c, 0xa1, 0xbf, 0xc5, 0xf4, 0x0f, 0xb3,
	0xf5, 0x3b, 0x94, 0xb4, 0x2c, 0x7f, 0xe0, 0x3f, 0x82, 0x41, 0x1f, 0x60, 0x63, 0xe4, 0xcd, 0x6e,
	0x26, 0xd8, 0x14, 0x45, 0x0c, 0x31, 0x99, 0xdd, 0xb9, 0xcc, 0x31, 0x9b, 0x8e, 0x4b, 0x59, 0x79,
	0x24, 0x6d, 0x5a, 0xd0, 0xbe, 0x53, 0xe0, 0x1f, 0xa9, 0xd5, 0x47, 0x64, 0xc9, 0xe1, 0x2d, 0xb9,
	0x1a, 0x76, 0x40, 0xbe, 0x7a, 0x37, 0x72, 0xac, 0x09, 0x5f, 0xfe, 0x36, 0x8b, 0xfb, 0x36, 0x7b,
	0xf9, 0x03, 0xc1, 0x6a, 0xc5, 0x24, 0xb1, 0x01, 0xd5, 0x7f, 0x14, 0x85, 0x9e, 0x43, 0xc9, 0x26,
	0x57, 0xc8, 0x8d, 0x3a, 0xa3, 0xea, 0x0e, 0x51, 0x29, 0xe8, 0xb1, 0x8d, 0x5e, 0xc1, 0x46, 0x9f,
	0x0a, 0xda, 0xde, 0x44, 0x0b, 0x02, 0x2f, 0xa8, 0x3e, 0x23, 0x80, 0x35, 0x3d, 0xed, 0x6c, 0xae,
	0xc1, 0xaa, 0xed, 0xb9, 0x11, 0xa1, 0xa8, 0x00, 0x25, 0x59, 0xe2, 0x55, 0x15, 0x8a, 0xbc, 0x9e,
	0xa2, 0x2a, 0xac, 0x1a, 0x33, 0xdb, 0x26, 0x6f, 0x11, 0x7b, 0x7e, 0x4a, 0xba, 0x34, 0xd5, 0x2a,
	0x14, 0x79, 0x6a, 0xd0, 0x26, 0xe4, 0xae, 0x6a, 0x6c, 0xba, 0xac, 0x93, 0x91, 0x7a, 0x04, 0xe5,
	0x64, 0xea, 0x16, 0xe7, 0x99, 0x5d, 0x67, 0xef, 0x12, 0xb5, 0xeb, 0xea, 0x3e, 0x59, 0x6a, 0xaa,
	0xf0, 0x96, 0x41, 0x39, 0x11, 0x78, 0xe5, 0x44, 0xad, 0xc3, 0x4e, 0x56, 0x7d, 0xa5, 0xa8, 0x2b,
	0x89, 0xba, 0xa2, 0x96, 0x2e, 0x62, 0x2a, 0xba, 0xfa, 0x16, 0x36, 0xd3, 0x8f, 0xc9, 0x32, 0x7a,
	0x28, 0xd1, 0x43, 0xb5, 0x09, 0xbb, 0xd9, 0xa5, 0x71, 0x99, 0xd5, 0x90, 0xac, 0x06, 0xb5, 0x9a,
	0xec, 0x99, 0x24, 0x56, 0x53, 0xfd, 0x41, 0x81, 0xea, 0x7d, 0xd5, 0x0f, 0xbd, 0x96, 0x61, 0x1e,
	0x78, 0xee, 0xa8, 0xc0, 0x6b, 0x29, 0xf0, 0x20, 0xae, 0x41, 0x71, 0x4d, 0xf1, 0x42, 0x3f, 0x80,
	0x6b, 0xaa, 0xff, 0x82, 0xca, 0xe2, 0x33, 0x42, 0x97, 0x7d, 0x2d, 0xb7, 0x74, 0x4d, 0xaf, 0x10,
	0xb9, 0x5c, 0xfe, 0xc8, 0x23, 0x37, 0x84, 0xef, 0x2c, 0xb6, 0xd5, 0x1f, 0x15, 0x78, 0xf9, 0xe8,
	0xa7, 0x9e, 0x75, 0xba, 0x8d, 0x9a, 0x3c, 0xdd, 0x06, 0xb3, 0x9b, 0x35, 0x91, 0x27, 0x32, 0x12,
	0xa7, 0xbf, 0x22, 0x4f, 0x9f, 0xe1, 0xeb, 0xac, 0x17, 0xa0, 0x78, 0x66, 0x37, 0xeb, 0xec, 0x7d,
	0xa7, 0xf8, 0x3a, 0x3f, 0xd8, 0x55, 0x71, 0xb0, 0xd4, 0x32, 0xd8, 0xfb, 0x4b, 0x2c, 0x43, 0xf5,
	0x60, 0xef, 0xde, 0xf2, 0x47, 0xb7, 0xd6, 0x9c, 0x38, 0xee, 0x08, 0x8f, 0x1a, 0x62, 0x79, 0xb1,
	0x9d, 0x98, 0x6b, 0xca, 0x6d, 0x4b, 0x9b, 0x0b, 0xe6, 0x53, 0x82, 0x2b, 0x52, 0xf0, 0x7b, 0x05,
	0x0e, 0x1e, 0xab, 0x3e, 0xa8, 0x02, 0xf9, 0xab, 0x9a, 0x4c, 0x09, 0x1d, 0x72, 0x8f, 0xbc, 0xf2,
	0x74, 0xc8, 0x3c, 0x75, 0x99, 0x16, 0x3a, 0xe4, 0x1e, 0x99, 0x18, 0x3a, 0xe4, 0xd7, 0xad, 0x90,
	0xba, 0x6e, 0x45, 0x79, 0xdd, 0xbe, 0x82, 0xdd, 0xa5, 0x32, 0x62, 0x07, 0x8e, 0x1f, 0x71, 0x96,
	0x92, 0x62, 0x89, 0x2b, 0xdb, 0x44, 0x08, 0x56, 0x4e, 0xac, 0xf0, 0x93, 0x90, 0x65, 0x63, 0xb4,
	0x0b, 0xc5, 0xeb, 0xc6, 0xc4, 0xff, 0x64, 0x09, 0x69, 0x61, 0xa9, 0x9f, 0x73, 0x69, 0x89, 0x79,
	0xed, 0xa1, 0xb5, 0xc5, 0x98, 0x5a, 0x93, 0x49, 0x63, 0xe0, 0xb5, 0xad, 0xa9, 0xe8, 0x4c, 0xcb,
	0x7a, 0xda, 0x19, 0xa3, 0x9a, 0x12, 0x95, 0x4b, 0xa0, 0xa4, 0x93, 0x9e, 0x44, 0x1c, 0x86, 0x2f,
	0x2b, 0xb6, 0xd9, 0x29, 0xc9, 0xb9, 0x15, 0x71, 0x4a, 0x72, 0xee, 0x1d, 0xe4, 0x06, 0x35, 0xd1,
	0x42, 0x1e, 0x3c, 0x50, 0x5b, 0x59, 0x52, 0x74, 0x82, 0x65, 0x8c, 0xba, 0x68, 0x1c, 0xbf, 0x84,
	0x51, 0x57, 0x7f, 0x56, 0x40, 0x7d, 0xbc, 0x58, 0xd3, 0x1a, 0x79, 0x1e, 0x8c, 0x7b, 0xd6, 0x14,
	0xb3, 0x44, 0xac, 0xe9, 0xd2, 0x14, 0xdf, 0x46, 0x6e, 0xa1, 0xf2, 0xe5, 0xe3, 0xbb, 0x4f, 0xce,
	0x83, 0x7c, 0x54, 0x0d, 0xb1, 0x39, 0x36, 0x16, 0xbe, 0xa6, 0x38, 0x78, 0x36, 0x26, 0xbd, 0x2c,
	0xcc, 0x35, 0x1f, 0xde, 0xc2, 0x1c, 0xa7, 0x27, 0x38, 0xea, 0x6f, 0x39, 0xd8, 0x9e, 0x37, 0x24,
	0x06, 0x26, 0x8f, 0x54, 0x74, 0x8a, 0xef, 0xe8, 0xfd, 0xe8, 0xc9, 0xdb, 0xd2, 0xa3, 0x56, 0x5b,
	0xde, 0x96, 0xb6, 0x58, 0x7d, 0x7e, 0x61, 0xf5, 0xa9, 0x2f, 0xf7, 0xea, 0xbd, 0xfc, 0x72, 0xaf,
	0xde, 0xa3, 0x1d, 0x28, 0x1c, 0x77, 0xbd, 0x71, 0x5f, 0xdc, 0x52, 0x6e, 0x48, 0x6f, 0x5b, 0x7c,
	0xc3, 0xdc, 0x90, 0xde, 0xff, 0x89, 0x6f, 0x99, 0x1b, 0xe4, 0x88, 0xb6, 0x2f, 0x71, 0x40, 0x3e,
	0x60, 0x8b, 0xbc, 0x1e, 0x9a, 0xcb, 0x9b, 0xff, 0x1e, 0xeb, 0x8d, 0xcb, 0x7a, 0xd6, 0x14, 0x22,
	0x8f, 0xc3, 0xb2, 0xbb, 0x5d, 0x63, 0xbd, 0x6f, 0x59, 0xcf, 0x9c, 0xcb, 0xe6, 0x9c, 0xd4, 0x58,
	0x37, 0x9b, 0xc9, 0x39, 0xa9, 0xd1, 0xcc, 0x9c, 0xb2, 0x8e, 0xb4, 0xa0, 0x2b, 0xa7, 0x74, 0xe7,
	0xa7, 0x35, 0xd6, 0x4e, 0x16, 0x74, 0x32, 0x52, 0x7f, 0xcd, 0x41, 0x25, 0xd1, 0xee, 0xcd, 0x6e,
	0xbe, 0x20, 0xb5, 0xc3, 0x38, 0xb5, 0x43, 0x96, 0xda, 0x61, 0x9c, 0xda, 0x21, 0x4b, 0xed, 0x30,
	0x4e, 0xed, 0xf0, 0xcf, 0x9c, 0xda, 0x6f, 0x60, 0x6b, 0xa9, 0xef, 0xa7, 0x94, 0x0b, 0x99, 0xda,
	0x0b, 0x6a, 0x69, 0x32, 0xb5, 0x1a, 0xb5, 0x2e, 0x65, 0xf9, 0xbe, 0x64, 0xc9, 0xc0, 0x93, 0x48,
	0xd6, 0x0f, 0x6e, 0x50, 0x6f, 0xd7, 0xba, 0xc1, 0x13, 0x91, 0x61, 0x6e, 0x50, 0x66, 0x57, 0x56,
	0xd8, 0xae, 0x1a, 0xc2, 0xde, 0xbd, 0x1d, 0x3c, 0x5d, 0xe5, 0x45, 0xfc, 0xe8, 0x5d, 0xb0, 0xf3,
	0xd3, 0xe2, 0x0f, 0x5d, 0x63, 0xf6, 0x65, 0x7c, 0xbe, 0x97, 0x35, 0x5a, 0x64, 0x99, 0x72, 0x4d,
	0x16, 0x59, 0x6e, 0x51, 0x5c, 0xb7, 0x26, 0xcf, 0xb9, 0x5b, 0x53, 0x7f, 0x52, 0x92, 0x9f, 0xe9,
	0xfc, 0xd1, 0x26, 0x7c, 0x7d, 0xe0, 0x4c, 0x46, 0x58, 0x68, 0x0a, 0x0b, 0x1d, 0xc0, 0x3a, 0x1f,
	0x75, 0xc2, 0x1e, 0x1e, 0xb3, 0x05, 0x94, 0xf4, 0xa4, 0x8b, 0x32, 0x0d, 0xce, 0xe4, 0xab, 0x11,
	0x16, 0x65, 0x1a, 0x09, 0xe6, 0x0a, 0x67, 0x1a, 0x69, 0xe6, 0x19, 0x67, 0xf2, 0xf5, 0x09, 0x8b,
	0x32, 0xcf, 0x12, 0xcc, 0x22, 0x67, 0x26, 0x5c, 0x87, 0xbf, 0x28, 0x00, 0xf3, 0xff, 0x26, 0x48,
	0x5e, 0x4b, 0x7d, 0xed, 0x58, 0xd3, 0x0d, 0xad, 0x57, 0x79, 0x82, 0x9e, 0xc2, 0xba, 0xb4, 0x4c,
	0xad, 0x55, 0x51, 0xd0, 0x3a, 0x69, 0x31, 0x5b, 0x27, 0xbd, 0x73, 0x5d, 0xaf, 0xe4, 0x48, 0x42,
	0x40, 0x18, 0x74, 0x32, 0x4f, 0x6d, 0x92, 0x8f, 0x46, 0xa7, 0xdb, 0xed, 0x68, 0x7a, 0x65, 0x05,
	0x6d, 0xc3, 0xd3, 0xbe, 0xa1, 0x5d, 0x1c, 0x9f, 0xf7, 0x86, 0x67, 0xc6, 0xd0, 0x30, 0x5b, 0x8d,
	0x4a, 0x81, 0x14, 0xe0, 0x9d, 0x94, 0x93, 0xfc, 0x98, 0x6d, 0x22, 0x56, 0x44, 0x2f, 0x61, 0x3f,
	0x35, 0xd3, 0x31, 0x8c, 0x0b, 0xcd, 0x6c, 0xe9, 0x64, 0x01, 0xbd, 0x41, 0xa7, 0xd1, 0xad, 0xac,
	0x92, 0x67, 0xea, 0x20, 0x05, 0x19, 0xe8, 0x8d, 0x9e, 0xf1, 0x51, 0xd3, 0x93, 0xa8, 0xd2, 0xe1,
	0x11, 0x79, 0xcc, 0x52, 0x7f, 0x94, 0xac, 0x41, 0xc1, 0xe8, 0xb4, 0xcf, 0x1a, 0x64, 0x47, 0xab,
	0x90, 0xbf, 0x3e, 0xed, 0x93, 0x9d, 0x10, 0x1f, 0x19, 0x9c, 0x9f, 0x56, 0x72, 0xf5, 0x0f, 0x64,
	0xcf, 0xa2, 0xd3, 0x46, 0x35, 0xc8, 0xeb, 0x33, 0x17, 0x6d, 0xcd, 0x0b, 0xb6, 0xf8, 0x6f, 0xe7,
	0xf9, 0xb2, 0x4b, 0x7d, 0xf2, 0x46, 0x79, 0xa7, 0xdc, 0x14, 0x99, 0xff, 0xfd, 0x1f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xd9, 0xbf, 0x12, 0xa9, 0x1f, 0x12, 0x00, 0x00,
}
